{"version":3,"sources":["card-list/CardContent.component.jsx","card-list/Card.component.jsx","search/search.component.jsx","App.js","serviceWorker.js","index.js"],"names":["CardContent","props","className","src","id","alt","title","Card","lists","map","list","key","Search","placeholder","handleChange","type","onChange","App","textSearch","e","setState","search","target","value","state","users","recipes","name","fetch","then","res","json","console","log","pers","this","searchfield","filtered","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"qUAGaA,G,YAAc,SAAAC,GACvB,OACI,yBAAKC,UAAU,sBACX,yBAAKC,IAAG,mCAA8BF,EAAMG,GAApC,sBAA4DC,IAAI,eACxE,4BAAKJ,EAAMK,UCHVC,EAAO,SAAAN,GAChB,OACI,yBAAKC,UAAU,aACVD,EAAMO,MAAMC,KAAI,SAAAC,GAAI,OACjB,kBAAC,EAAD,CAAaC,IAAKD,EAAKN,GAAIA,GAAIM,EAAKN,GAAIE,MAAOI,EAAKJ,aCLvDM,G,MAAS,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,aAClC,OACI,2BAAOC,KAAK,SAASb,UAAU,SAASW,YAAaA,EAAaG,SAAUF,MCoErEG,G,wDAnEb,aAAe,IAAD,8BACZ,gBAyBAC,WAAa,SAAAC,GACX,EAAKC,SAAS,CACZC,OAAQF,EAAEG,OAAOC,SA1BnB,EAAKC,MAAQ,CACXC,MAAO,GACPJ,OAAQ,GACRK,QAAS,CAAC,CACNC,KAAM,iBACNvB,GAAI,GAEN,CACEuB,KAAM,kCACNvB,GAAI,GAEN,CACEuB,KAAM,qBACNvB,GAAI,KAfA,E,gEAgCS,IAAD,OAIlBwB,MAAM,8CACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAC,GAAG,OAAI,EAAKV,SAAS,CAAEK,MAAOK,IAAO,kBAAME,QAAQC,c,+BAQ7D,IAAMC,EAAOC,KAAKX,MAAMC,MAClBW,EAAcD,KAAKX,MAAMH,OAIzBgB,EAAWH,EAAKI,QAAO,SAAAR,GAAG,OAAIA,EAAIxB,MAAMiC,cAAcC,SAASJ,EAAYG,kBAEjF,OADAP,QAAQC,IAAII,GAEV,6BAASnC,UAAU,WACjB,yBAAKA,UAAU,aACb,yBAAKA,UAAU,UACb,6CACA,kBAAC,EAAD,CAAQW,YAAY,SAASC,aAAcqB,KAAKjB,cAElD,kBAAC,EAAD,CAAMV,MAAO6B,U,GA7DLI,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAQ,kBAAC,IAAMC,WAAP,KAAkB,kBAAC,EAAD,OACjCC,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1B,QAAQ0B,MAAMA,EAAMC,c","file":"static/js/main.07fb6d4b.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.scss';\r\n\r\nexport const CardContent = props => {\r\n    return (\r\n        <div className=\"col card-container\">\r\n            <img src={`https://picsum.photos/id/${props.id}/200/300?grayscale`} alt=\"Random img\"/>\r\n            <h4>{props.title}</h4>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport './card-list.styles.scss';\r\nimport {CardContent} from './CardContent.component';\r\n\r\nexport const Card = props => {\r\n    return (\r\n        <div className=\"card-list\">\r\n            {props.lists.map(list =>\r\n                <CardContent key={list.id} id={list.id} title={list.title} />\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\n","import React from 'react';\r\nimport './search-box.styles.scss';\r\n\r\nexport const Search = ({ placeholder, handleChange}) => {\r\n    return (\r\n        <input type=\"search\" className=\"search\" placeholder={placeholder} onChange={handleChange} />\r\n    );\r\n}","import React, { Component } from 'react';\nimport { Card } from './card-list/Card.component';\nimport { Search } from './search/search.component';\nimport './App.scss';\n\nclass App extends Component {\n  constructor() {\n    super();\n      this.state = {\n        users: [],\n        search: '',\n        recipes: [{\n            name: 'Spinach delice',\n            id: 1\n          },\n          {\n            name: 'Vitamin C & Protein Power Salad',\n            id: 2\n          },\n          {\n            name: 'Honey matcha bites',\n            id: 3\n          }\n        ]\n      }\n    // not efficient because we don't want to set the \n    //  context of this each time we write a new function\n    // this.textSearch = this.textSearch.bind(this);\n  }\n  \n    // better use arrow functions, because it allows us set the context of this where the method has been declared\n    //  how it does that? because it is lexicaly scoped\n    textSearch = e => {\n      this.setState({\n        search: e.target.value\n      })\n    }\n  \n    componentDidMount() {\n      // 1. using fetch browser method I make a call to the api and fetch returns a promise\n      // 2.  in order to make it javascript readable we need to transform that response in a json format:\n      // 3.\n      fetch('https://jsonplaceholder.typicode.com/posts')\n        .then(res => res.json())\n        .then(res => this.setState({ users: res }, () => console.log()));\n    }\n  \n\n  \n  render() {\n    // let reduced = this.state.users;\n    // console.log(reduced);\n    const pers = this.state.users;\n    const searchfield = this.state.search;\n\n\n\n    const filtered = pers.filter(res => res.title.toLowerCase().includes(searchfield.toLowerCase()));\n    console.log(filtered);\n    return (\n      <section className=\"section\">\n        <div className=\"container\">\n          <div className=\"d-flex\">\n            <h1> Art Gallery </h1>\n            <Search placeholder=\"Search\" handleChange={this.textSearch}></Search>\n          </div>\n          <Card lists={filtered} />\n        </div>\n      </section>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// Grabs an element from the DOM and inserts App to it;\nReactDOM.render( <React.StrictMode><App /></React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}